from django.shortcuts import render
from django.utils import timezone,formats
from django.template import RequestContext,Context, Template, Context, loader
from django.shortcuts import render_to_response
from django.contrib.auth import authenticate, login
from django.contrib.auth.decorators import login_required
from django.contrib.auth import logout
from django.views.decorators.csrf import csrf_protect,csrf_exempt
from django.http import HttpResponseRedirect, HttpResponse, JsonResponse
from django.contrib.auth.models import User
from adminpanel.models import *
from django.db import connection
from django.db.models import Avg
from datetime import datetime, timedelta
# import PIL
# from PIL import Image
import os
from os.path import basename
from django.conf import settings
from django.db.models import Q
from django.db import connection
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.db.models import Max
from django.template.loader import render_to_string
from django.core.mail import send_mail
from django.contrib import messages
#from paypal.standard.forms import PayPalPaymentsForm
#from django.core.urlresolvers import reverse
from django.utils.html import strip_tags
from decimal import Decimal
ACCESS_CONTROL_ALLOW_ORIGIN = '*'

def dictfetchall(cursor):
	"Return all rows from a cursor as a dict"
	columns = [col[0] for col in cursor.description]
	return [
		dict(zip(columns, row))
		for row in cursor.fetchall()
	]

def home_index(request):
	import json
	imageurl="http://138.68.12.41:8007/static/media/"
	cursor = connection.cursor()
	cursor.execute("select banner_image,banner_title,banner_text,banner_logo from adminpanel_banner where id=8")
	banner = dictfetchall(cursor)
	cursor.execute("select banner_image,title,short_description from adminpanel_cms where id IN(1,2,3)")
	cms = dictfetchall(cursor)
	cursor.execute("select banner_image,title,short_description from adminpanel_cms where id=5")
	whyinter = dictfetchall(cursor)
	cursor.execute("select banner_image from adminpanel_cms where id IN(6,7,8)")
	bannerlowercms = dictfetchall(cursor)
	if banner and  cms and  whyinter and  bannerlowercms :
		data = json.dumps({"Ack":"1", "banner":banner,'cms':cms,'whyinter':whyinter,'bannerlowercms':bannerlowercms,'imageurl':imageurl})
		'''HttpResponse.headers.add('Access-Control-Allow-Origin', '*')
		HttpResponse.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
		HttpResponse.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')'''
		return HttpResponse(data)
		'''response.__setitem__("Content-type", "application/json")
		response.__setitem__("Access-Control-Allow-Origin", "*")
		return response'''
		'''return HttpResponse(data)'''
	else:
		data = json.dumps({"Ack":"0", "banner":'','cms':'','whyinter':'','bannerlowercms':'','imageurl':''})
		return HttpResponse(data)

def login_user_submit(request):
	import json
	import base64
	rtn_obj = {}
	if request.method == 'POST':
			username = request.POST.get('username', None)
			password = request.POST.get('password', None)
			#return HttpResponse(username)

			user = authenticate(username=username, password=password)
			if user is not None:
				login(request, user)
				request.session['member_id'] = user.id
				userData = User.objects.get(id = user.id)
				userpro = UserProfile.objects.get(user_id = user.id)
				#userrole = UserWithroles.objects.get(user_id=user.id)

				cursor12 = connection.cursor()
				sql2 = "select id, address, phone_number, profile_image, latitude, longitude, about_me, physical_ability, is_verified, interest_id_id from adminpanel_userprofile where user_id_id='"+str(user.id)+"'"
				cursor12.execute(sql2)
				userprofiles = cursor12.fetchone()
				print (userprofiles)
				rtn_obj['ack'] = "1"
				rtn_obj['user_id'] = str(user.id)
				rtn_obj['first_name'] = userData.first_name
				rtn_obj['last_name'] = userData.last_name
				rtn_obj['email'] = userData.email
				rtn_obj['username'] = userData.username
				#rtn_obj['date_of_birth'] = userpro.year + "-" + userpro.month + "-" + userpro.date
				#rtn_obj['gender'] = userpro.gender
				#rtn_obj['user_image'] = settings.BASE_URL + "/media/profile_image.png/"
				#rtn_obj['urole'] = str(userrole.userroles_id)
				rtn_obj['msg_error'] = " Log In Successfull! "
				#for profile in userprofiles:
				rtn_obj['address'] = userprofiles[1]
				data = json.dumps(rtn_obj)
				return HttpResponse(data)
			else:
				rtn_obj['ack'] = "0"
				rtn_obj['msg_error'] = " Your username and/or password were incorrect. "
				data = json.dumps(rtn_obj)
				return HttpResponse(data)
	else:
		rtn_obj['ack'] = "2"
		rtn_obj['msg_error'] = "Error 404"
		data = json.dumps(rtn_obj)
		return HttpResponse(data)


def facebook_login(request):
	import json
	rtn_obj = {}

	# if 'member_id' in request.session:
	#    return HttpResponse('0') # already logged in
	# else:
	if request.method == 'POST':
		fbid = request.POST['fbid']
		fname = request.POST['first_name']
		lname = request.POST['last_name']
		username = request.POST['username']
		email = request.POST['email']
		if User.objects.filter(email=email).exists():
			UserData = User.objects.get(email=email)
			fbprofile = UserProfile.objects.get(user_id = UserData.id)
			fbprofile.facebook_id = fbid
			fbprofile.save()
			rtn_obj['ack'] = "1"
			rtn_obj['user_id'] = str(UserData.id)
			rtn_obj['first_name'] = fname
			rtn_obj['last_name'] = lname
			rtn_obj['email'] = email
			rtn_obj['fb_id'] = fbid
			rtn_obj['msg_error'] = " Log In Successfull! "
			data = json.dumps(rtn_obj)
			return HttpResponse(data)

		else :
			if UserProfile.objects.filter(facebook_id=fbid).exists():
				fbprofile = UserProfile.objects.get(facebook_id=fbid)
				UserData = User.objects.get(email=email)
				# request.session['member_id'] = fbprofile.user_id
				rtn_obj['ack'] = "1"
				rtn_obj['user_id'] = str(UserData.id)
				rtn_obj['first_name'] = fname
				rtn_obj['last_name'] = lname
				rtn_obj['email'] = email
				rtn_obj['fb_id'] = fbid
				rtn_obj['msg_error'] = " Log In Successfull! "
				data = json.dumps(rtn_obj)
				return HttpResponse(data)
			else :
				user = User.objects.create_user(
					username = username,
					email = email,
					first_name = fname,
					last_name = lname
				)
				user.save()

				userID = user.id

				new_profile = UserProfile(
					user = user,
					facebook_id = fbid
				)
				new_profile.save()
				user_withroles = UserWithroles(
					user = user,
					userroles_id = 2
				)
				user_withroles.save()

				# request.session['member_id'] = user.id
				rtn_obj['ack'] = "1"
				rtn_obj['user_id'] = str(userID)
				rtn_obj['first_name'] = fname
				rtn_obj['last_name'] = lname
				rtn_obj['email'] = email
				rtn_obj['fb_id'] = fbid
				rtn_obj['msg_error'] = " Log In Successfull! "
				data = json.dumps(rtn_obj)
				return HttpResponse(data)


def google_login(request):
	import json
	rtn_obj = {}

	# if 'member_id' in request.session:
	#    return HttpResponse('0') # already logged in
	# else:
	if request.method == 'POST':
		gpid = request.POST['gpid']
		fname = request.POST['first_name']
		lname = request.POST['last_name']
		username = request.POST['username']
		email = request.POST['email']
		if User.objects.filter(email = email).exists():
			UserData = User.objects.get(email=email)
			fbprofile = UserProfile.objects.get(user_id = UserData.id)
			fbprofile.google_id = gpid
			fbprofile.save()
			rtn_obj['ack'] = "1"
			rtn_obj['user_id'] = str(UserData.id)
			rtn_obj['first_name'] = fname
			rtn_obj['last_name'] = lname
			rtn_obj['email'] = email
			rtn_obj['gp_id'] = gpid
			rtn_obj['msg_error'] = " Log In Successfull! "
			data = json.dumps(rtn_obj)
			return HttpResponse(data)
		else :
			if UserProfile.objects.filter(google_id = gpid).exists():
				fbprofile = UserProfile.objects.get(google_id = gpid)
				UserData = User.objects.get(email=email)
				# request.session['member_id'] = fbprofile.user_id
				rtn_obj['ack'] = "1"
				rtn_obj['user_id'] = str(UserData.id)
				rtn_obj['first_name'] = fname
				rtn_obj['last_name'] = lname
				rtn_obj['email'] = email
				rtn_obj['gp_id'] = gpid
				rtn_obj['msg_error'] = " Log In Successfull! "
				data = json.dumps(rtn_obj)
				return HttpResponse(data)
			else :
				user = User.objects.create_user(
					username = username,
					email = email,
					first_name = fname,
					last_name = lname
				)
				user.save()

				userID = user.id

				new_profile = UserProfile(
					user = user,
					google_id = gpid
				)
				new_profile.save()
				user_withroles = UserWithroles(
					user = user,
					userroles_id = 2
				)
				user_withroles.save()

				# request.session['member_id'] = user.id
				rtn_obj['ack'] = "1"
				rtn_obj['user_id'] = str(userID)
				rtn_obj['first_name'] = fname
				rtn_obj['last_name'] = lname
				rtn_obj['email'] = email
				rtn_obj['gp_id'] = gpid
				rtn_obj['msg_error'] = " Log In Successfull! "
				data = json.dumps(rtn_obj)
				return HttpResponse(data)

def forgot_password_submit(request):
	import json
	rtn_obj = {}
	if request.method == 'POST':
		forgot_mail = request.POST['forgot_mail']
		if User.objects.filter(email=forgot_mail).exists() :
			forgotuser = User.objects.get(email=forgot_mail)
			userprofile = UserProfile.objects.get(user_id=forgotuser.id)
			forgot_link = "http://138.68.12.41:8007/resetpassword/"+str(forgot_mail)
			mailfname = forgotuser.first_name
			forgetpassword_mail=EmailTemplates.objects.get(pk=3)
			t = forgetpassword_mail.templatebody
			t1=t.replace('[NAME]',mailfname,1)
			t2=t1.replace('[LINK]',forgot_link,1)
			msg_html = t2
			send_mail(forgetpassword_mail.subject, 'hello world again', 'tanay@natitsolved.com', [forgotuser.email], html_message=msg_html)
			rtn_obj['ack'] = "1"
			rtn_obj['msg_error'] = "Email Send successfully"
			data = json.dumps(rtn_obj)
			return HttpResponse(data)
		else :
			rtn_obj['ack'] = "0"
			rtn_obj['msg_error'] = "Email not Send successfully"
			data = json.dumps(rtn_obj)
			return HttpResponse(data)
	else :
		rtn_obj['ack'] = "0"
		rtn_obj['msg_error'] = "Email not Send successfully"
		data = json.dumps(rtn_obj)
		return HttpResponse(data)


def reset_password_submit(request):
	import json
	rtn_obj = {}
	if request.POST :
		forgot_mail = request.POST['forgot_mail']
		newpassword=request.POST['password']
		confirmpassword=request.POST['cpassword']
		if newpassword != confirmpassword :
			rtn_obj['ack'] = "0"
			rtn_obj['msg_error'] = "confirmpassword is not same!"
			data = json.dumps(rtn_obj)
			return HttpResponse(data)
		else :
			user=User.objects.get(email=forgot_mail)
			user.set_password(newpassword)
			user.save()
			rtn_obj['ack'] = "1"
			rtn_obj['msg_error'] = "Password change successfully"
			data = json.dumps(rtn_obj)
			return HttpResponse(data)
	else :
			rtn_obj['ack'] = "0"
			rtn_obj['msg_error'] = "Password Not change successfully"
			data = json.dumps(rtn_obj)
			return HttpResponse(data)


def logout_page(request):
	import json
	rtn_obj = {}
	logout(request)
	rtn_obj['ack'] = "1"
	rtn_obj['msg_error'] = "Logout Successfully"
	data = json.dumps(rtn_obj)
	return HttpResponse(data)


def register_user(request):
	import json
	import base64
	rtn_obj = {}
	first_name = request.POST.get('first_name', None)
	last_name = request.POST.get('last_name', None)
	email = request.POST.get('email', None)
	location = request.POST.get('location', None)
	phonenumber = request.POST.get('phonenumber', None)
	cityLat = request.POST.get('cityLat', None)
	cityLng = request.POST.get('cityLng', None)
	password = request.POST.get('password', None)

	if request.method == 'POST':
		if User.objects.filter(email=email).exists():
			rtn_obj['msg_error'] = "User Exists!"
			rtn_obj['ack'] = "0"
			data = json.dumps(rtn_obj)
			return HttpResponse(data)
		else :
			import time
			activate_no = int(time.time())
			user = User.objects.create_user(
			password=password,
			is_superuser=False,
			username=email,
			first_name=first_name,
			last_name=last_name,
			email=email,
			is_staff=False,
			is_active=False
			)
			user.save()

			#Save userinfo record
			user_info = UserProfile(
			address=location,
			phone_number=phonenumber,
			latitude=cityLat,
			longitude=cityLng,
			is_verified=0,
			interest_id_id=1,
			role_id=2,
			user_id_id=user.id,
			activate_token=activate_no
			)
			user_info.save()

			#request.session['member_id'] = user.id
			#activation_link = "http://111.93.169.90/team4/inteerApp/activation/"+str(activate_no)
			activation_link = "http://138.68.12.41:8007/api/activation/"+str(activate_no)
			mailpwd = request.POST.get('password', None)
			mailfname = request.POST.get('first_name', None)
			register_mail=EmailTemplates.objects.get(pk=1)
			t = register_mail.templatebody
			t1=t.replace('[NAME]',mailfname,1)
			t2=t1.replace('[LINK]',activation_link,1)
			msg_html = t2
			send_mail(register_mail.subject, 'hello world again', 'tanay@natitsolved.com', [user.email], html_message=msg_html)
			rtn_obj['msg_error'] = "Registerd!"
			rtn_obj['ack'] = "1"
			data = json.dumps(rtn_obj)
			return HttpResponse(data)
	else :
		rtn_obj['msg_error'] = "Registerd Not Successful!"
		rtn_obj['ack'] = "2"
		data = json.dumps(rtn_obj)
		return HttpResponse(data)


def activate_link(request,base64string):
	#return HttpResponse(base64string)
	import json
	import base64
	rtn_obj = {}
	rtnvalue = activate_account(base64string)
	#checkval = rtnvalue.split("#")
	#if checkval[0] == "0":
	if rtnvalue == "0":
	   #messages.add_message(request, messages.SUCCESS, 'Account is already Activated!',fail_silently=True)
		rtn_obj['msg_error'] = "Account is already Activated!"
		rtn_obj['Ack'] = "0"
		data = json.dumps(rtn_obj)
		return HttpResponseRedirect("http://111.93.169.90/team4/inteerApp/#/login")
		#return HttpResponse(data)
	else :
		   #messages.add_message(request, messages.SUCCESS, 'Account is Activated!',fail_silently=True)
		   rtn_obj['msg_error'] = "Account is Activated!"
		   rtn_obj['Ack'] = "1"
		   data = json.dumps(rtn_obj)
		   return HttpResponseRedirect("http://111.93.169.90/team4/inteerApp/#/login")
		   #return redirect("http://111.93.169.90/team4/inteerApp/#/login")
		   #return HttpResponse(data)


def activate_account(base64string):
	if UserProfile.objects.filter(activate_token=int(base64string)).exists():
		profile=UserProfile.objects.get(activate_token=int(base64string))
		user = User.objects.get(pk=profile.user_id_id)
		#if user.is_active == True:
		  #value_to_rtn = "0"+"#"+str(user.id)
		#else :
		user.is_active = True
		user.save()
		value_to_rtn = "1"
		#value_to_rtn = "1"+"#"+str(user.id)
		return value_to_rtn


def user_profile(request):
	import json
	rtn_obj = {}
	imageurl="http://138.68.12.41:8007/static/media/"
	if request.method == 'POST':
		user_id = request.POST.get('user_id',None)
		#user = User.objects.get(pk=user_id)
		#return HttpResponse(user_id)
		cursor11 = connection.cursor()
		sql1 = "select id,email,first_name,last_name from auth_user where id='"+user_id+"'"
		cursor11.execute(sql1)
		user = cursor11.fetchone()

		#userprofile = UserProfile.objects.get(user_id_id=user_id)

		cursor12 = connection.cursor()
		sql2 = "select id, address, phone_number, profile_image, latitude, longitude, about_me, physical_ability, is_verified, interest_id_id from adminpanel_userprofile where user_id_id='"+user_id+"'"
		cursor12.execute(sql2)
		userprofiles = cursor12.fetchone()
		#return HttpResponse(userprofiles)

		#organization = Organization.objects.all()
		#coordinatorexists = CordinatorRequest.objects.get(user_id=user_id)
		cursor13 = connection.cursor()
		sql3 = "select adminpanel_cordinatorrequest.*,adminpanel_cordinatorrequest.id as cid, adminpanel_cordinatorrequest.org_id_id as org_id, adminpanel_cordinatorrequest.user_id_id as user_id, adminpanel_organization.*, adminpanel_organization.id as org_id, adminpanel_organization.organization_name as org_name, adminpanel_organization.address as address from adminpanel_cordinatorrequest inner join adminpanel_organization on adminpanel_cordinatorrequest.org_id_id=adminpanel_organization.id where adminpanel_cordinatorrequest.user_id_id='"+user_id+"' and adminpanel_cordinatorrequest.status='Approved'"
		cursor13.execute(sql3)
		coordinatorexist = dictfetchall(cursor13)

		#interest = Interest.objects.all()
		#skill = Skills.objects.all()

		if user and  userprofiles and  coordinatorexist :
			data = json.dumps({"Ack":"1", "user_id":user_id,'user':user,'userprofile':userprofiles,'organization':'','coordinatorexists':coordinatorexist,'interest':'','skill':'','imageurl':imageurl})
			#return HttpResponse(data)
			'''response = HttpResponse(data)
			response.__setitem__("Content-type", "application/json")
			response.__setitem__("Access-Control-Allow-Origin", "*")
			return response'''
			return HttpResponse(data)
		else:
		   data = json.dumps({"Ack":"0", "user_id":user_id,'user':user,'userprofile':userprofiles,'organization':'','coordinatorexists':'','interest':'','skill':'','imageurl':''})
		   return HttpResponse(data)
	else :
		 data = json.dumps({"Ack":"0", "user_id":'','user':'','userprofile':'','organization':'','coordinatorexists':'','interest':'','skill':'','imageurl':''})
		 return HttpResponse(data)

def profile_edit(request):
	import json
	rtn_obj = {}
	if request.method == 'POST':
		user_id = request.POST.get('user_id',None)
		email = request.POST.get('email',None)
		first_name = request.POST.get('first_name',None)
		last_name = request.POST.get('last_name',None)
		phone_number = request.POST.get('phone_number',None)
		if request.method == 'POST':
			cursor1 = connection.cursor()
			cursor1.execute("update auth_user SET first_name='"+first_name+"', last_name='"+last_name+"', email='"+email+"' WHERE id='"+user_id+"'")
			cursor2 = connection.cursor()
			cursor2.execute("update adminpanel_userprofile SET phone_number='"+phone_number+"' WHERE user_id_id='"+user_id+"'")
			rtn_obj['msg_error'] = "Profile Updated successfully!"
			rtn_obj['Ack'] = "1"
			data = json.dumps(rtn_obj)
			return HttpResponse(data)
		else :
			rtn_obj['msg_error'] = "Profile not Updated successfully!"
			rtn_obj['Ack'] = "0"
			data = json.dumps(rtn_obj)
			return HttpResponse(data)
	else :
		rtn_obj['msg_error'] = "Profile not Updated successfully!"
		rtn_obj['Ack'] = "0"
		data = json.dumps(rtn_obj)
		return HttpResponse(data)

def become_coordinator(request):
	import json
	rtn_obj = {}
	if request.method == 'POST':
		org_id_id = request.POST.get('org_id',None)
		org_address = request.POST.get('org_address',None)
		employee_id = request.POST.get('employee_id',None)
		# org_id_id = request.POST['org_id_id']
		# org_address = request.POST['org_address']
		# employee_id = request.POST['employee_id']
		if request.POST:
			apply_coordinator = CordinatorRequest(
					user_id_id= request.POST.get('user_id',None),
					org_id_id=org_id_id,
					status="Pending",
					address=org_address,
					employee_number=employee_id
					)
			apply_coordinator.save()
			rtn_obj['msg_error'] = "Your application submited successfully!"
			rtn_obj['Ack'] = "1"
			data = json.dumps(rtn_obj)
			return HttpResponse(data)
		else :
			rtn_obj['msg_error'] = "Your application not submited successfully!"
			rtn_obj['Ack'] = "0"
			data = json.dumps(rtn_obj)
			return HttpResponse(data)
	else :
		rtn_obj['msg_error'] = "Your application not submited successfully!"
		rtn_obj['Ack'] = "0"
		data = json.dumps(rtn_obj)
		return HttpResponse(data)


def becomecoordinator(request):
	import json
	rtn_obj = {}
	imageurl="http://138.68.12.41:8007/static/media/"
	if request.method == 'POST':
		#user_id =request.POST['user_id']
		user_id = request.POST.get('user_id',None)
		# user = User.objects.filter(pk=user_id).all()
		# userprofile = UserProfile.objects.filter(user_id=user_id).all()
		# organization = Organization.objects.all()
		# coordinatorexists = CordinatorRequest.objects.filter(user_id=user_id).all()

		cursor11 = connection.cursor()
		sql1 = "select id,email,first_name,last_name from auth_user where id='"+user_id+"'"
		cursor11.execute(sql1)
		user = cursor11.fetchone()

		#userprofile = UserProfile.objects.get(user_id_id=user_id)

		cursor12 = connection.cursor()
		sql2 = "select id, address, phone_number, profile_image, latitude, longitude, about_me, physical_ability, is_verified, interest_id_id from adminpanel_userprofile where user_id_id='"+user_id+"'"
		cursor12.execute(sql2)
		userprofiles = cursor12.fetchone()
		#return HttpResponse(userprofiles)

		cursor14 = connection.cursor()
		sql4 = "select * from adminpanel_organization"
		cursor14.execute(sql4)
		organization = dictfetchall(cursor14)


		#coordinatorexists = CordinatorRequest.objects.get(user_id=user_id)
		cursor13 = connection.cursor()
		sql3 = "select adminpanel_cordinatorrequest.*,adminpanel_cordinatorrequest.id as cid, adminpanel_cordinatorrequest.org_id_id as org_id, adminpanel_cordinatorrequest.user_id_id as user_id, adminpanel_cordinatorrequest.address as caddress, adminpanel_organization.*, adminpanel_organization.id as org_id, adminpanel_organization.organization_name as org_name from adminpanel_cordinatorrequest inner join adminpanel_organization on adminpanel_cordinatorrequest.org_id_id=adminpanel_organization.id where adminpanel_cordinatorrequest.user_id_id='"+user_id+"'"
		cursor13.execute(sql3)
		coordinatorexists = dictfetchall(cursor13)


		if coordinatorexists:
			for coordinate in coordinatorexists:
				coordinate_data={}
				coordinate_data['status']=coordinate['status']
				coordinate_data['org_id']=coordinate['org_id_id']
				coordinate_data['org_address']=coordinate['caddress']
				coordinate_data['org_employee_number']=coordinate['employee_number']
		else:
			coordinate_data={}
			coordinate_data['status']='notexist'
			coordinate_data['org_id']=''
			coordinate_data['org_address']=''
			coordinate_data['org_employee_number']=''

		#interest = Interest.objects.all()
		#skill = Skills.objects.all()
		#if user and  userprofiles and coordinatorexists :
		data = json.dumps({"Ack":"1", "user_id":user_id,'user':user,'userprofile':userprofiles,'coordinatorexists':coordinatorexists,'imageurl':imageurl,'coordinate_data':coordinate_data,'organization':organization})
		return HttpResponse(data)
		#else:
		   #data = json.dumps({"Ack":"2", "user_id":user_id,'user':user,'userprofile':userprofiles,'coordinatorexists':'','imageurl':'','coordinate_data':'','organization':organization})
		   #return HttpResponse(data)
	else :
		 data = json.dumps({"Ack":"0", "user_id":'','user':'','userprofile':'','organization':'','coordinatorexists':'','interest':'','skill':'','imageurl':'','coordinate_data':''})
		 return HttpResponse(data)


def change_password(request):
	import json

	if request.method == 'POST':
		user_id = request.POST.get('user_id', None)
		new_password = request.POST.get('new_password', None)
		conf_password = request.POST.get('conf_password', None)

		if new_password == conf_password:
			u = User.objects.get(id=user_id)
			u.set_password(new_password)
			u.save()

			data = json.dumps({"Ack": 1, "msg": "Password successfully changed"})
		else:
			data = json.dumps({"Ack": 0, "msg": "Password and confirm password not matched"})
		return HttpResponse(data)


def get_activity_categories(self):
	import json

	cursor13 = connection.cursor()
	sql3 = "select * from adminpanel_activitycategory"
	cursor13.execute(sql3)
	categories = dictfetchall(cursor13)

	data = json.dumps({"Ack": 1, "categories": categories})

	return HttpResponse(data)

def get_organizations(self):
	import json

	cursor14 = connection.cursor()
	sql4 = "select * from adminpanel_organization"
	cursor14.execute(sql4)
	organizations = dictfetchall(cursor14)
	data = json.dumps({"Ack": 1, "organizations": organizations})
	return HttpResponse(data)

def get_opportunity_by_user(request):
	import json

	if request.method == 'POST':
		user_id = request.POST.get('user_id', None)
		cursor = connection.cursor()
		sql = "select id, opportunity_name from adminpanel_opportunities WHERE user_id_id=" + user_id
		cursor.execute(sql)
		opportunities = dictfetchall(cursor)
		data = json.dumps({"Ack": 1, "opportunities": opportunities})
	return HttpResponse(data)

def add_activity_category(request):
	import json

	if request.method == 'POST':
		name = request.POST.get('name', None)
		desc = request.POST.get('description', None)

		activity_category = ActivityCategory(
			name = name,
			description = desc
		)
		activity_category.save();

		data = json.dumps({"Ack": 1, "msg": "Activity category successfully saved"})
	else:
		data = json.dumps({"Ack": 0, "msg": "Post method supported only"})
	return HttpResponse(data)

def add_opportunity(request):
	import json

	if request.method == 'POST':
		user_id = request.POST.get('user_id', None)
		org_id = request.POST.get('org_id', None)
		opportunity_name = request.POST.get('opportunity_name', None)
		author_name = request.POST.get('author_name', None)
		address = request.POST.get('address', None)
		category_id = request.POST.get('category_id', None)
		volunteer_id = request.POST.get('volunteer_id', None)
		parent_id = request.POST.get('parent_id', None)
		# is_valid = request.POST.get('is_valid', None)
		# is_public = request.POST.get('is_public', None)
		# is_recurring = request.POST.get('is_recurring', None)
		no_ofyear = request.POST.get('no_ofyear', None)
		# parent_opportunity = request.POST.get('parent_opportunity', None)
		start_date = request.POST.get('start_date', None)
		end_date= request.POST.get('end_date', None)

		user = User.objects.get(id=user_id)
		organization = Organization.objects.get(id = org_id)
		category = ActivityCategory.objects.get(id = category_id)
		volunteer = Volunteer.objects.get(id = volunteer_id)

		opportunitiy = Opportunities(
			user_id = user,
			org_id = organization,
			opportunity_name = opportunity_name,
			author_name = author_name,
			address = address,
			category_id = category,
			volunteer_id = volunteer,
			parent_id = 0,
			is_valid = 1,
			is_public = 1,
			is_recurring = 0,
			no_ofyear = no_ofyear,
			parent_opportunity = 0,
			start_date = start_date,
			end_date = end_date
		)

		opportunitiy.save();

		data = json.dumps({"Ack": 1, "msg": "Opportunity successfully saved"})
	else:
		data = json.dumps({"Ack": 0, "msg": "Post method supported only"})

	return HttpResponse(data)


def add_organiztion(request):
	import json

	if request.method == 'POST':
		organization_name = request.POST.get('organization_name', None)
		parent_id = request.POST.get('parent_id', None)
		address = request.POST.get('address', None)
		tax_id = request.POST.get('tax_id', None)
		email = request.POST.get('email', None)
		web_url = request.POST.get('web_url', None)
		phone = request.POST.get('phone', None)
		cause = request.POST.get('cause', None)
		about_us = request.POST.get('about_us', None)
		our_activity = request.POST.get('our_activity', None)
		why_us = request.POST.get('why_us', None)
		photo =request.POST.get('photo', None)

		organization = Organization(
			organization_name = organization_name,
			parent_id = parent_id,
			address = address,
			tax_id = tax_id,
			email = email,
			web_url = web_url,
			phone = phone,
			cause = cause,
			about_us = about_us,
			our_activity = our_activity,
			why_us = why_us,
			photo = photo
		)

		organization.save()

		data = json.dumps({"Ack": 1, "msg": "Organization successfully saved"})

	else:
		data = json.dumps({"Ack": 0, "msg": "Post method supported only"})
	return HttpResponse(data)


def add_volunteer(request):
	import json

	if request.method == 'POST':
		volunteer_name = request.POST.get('volunteer_name')
		volunteer = Volunteer(
			volunteer_name = volunteer_name
		)
		volunteer.save()
		data = json.dumps({"Ack": 1, "msg": "Volunteer Added"})
	else:
		data = json.dumps({"Ack": 0, "msg": "Post method supported only"})
	return HttpResponse(data)

def get_volunteers(request):
	import json

	if request.method == 'GET':
		cursor = connection.cursor()
		sql = "select * from adminpanel_volunteer"
		cursor.execute(sql)
		volunteers = dictfetchall(cursor)
		data = json.dumps({"Ack": 1, "volunteers": volunteers})
	else:
		data = json.dumps({"Ack": 0, "msg": "Post method supported only"})
	return HttpResponse(data)

def get_opportunities(seld):
	import json

	cursor = connection.cursor()
	sql = """select AO.id, AO.opportunity_name, AU.first_name, AU.last_name
				from adminpanel_opportunities AO
				left join auth_user AU
				on AO.user_id_id = AU.id"""
	cursor.execute(sql)
	opportunities = dictfetchall(cursor)
	data = json.dumps({"Ack": 1, "opportunities": opportunities})
	return HttpResponse(data)

def get_opportunity_by_id(request):
	import json

	if request.method == 'POST':
		id = request.POST.get('id', None)
		cursor = connection.cursor()
		sql = "select ao.id, ao.opportunity_name, au.first_name, au.last_name from adminpanel_opportunities ao left join auth_user au on ao.user_id_id = au.id WHERE ao.id="+id
		cursor.execute(sql)
		opportunity = dictfetchall(cursor)
		data = json.dumps({"Ack": 1, "opportunity": opportunity})

	return HttpResponse(data)